name: Deploy To EC2

on:
  push:
    branches:
      - feat/*  # feat/로 시작하는 브랜치에서 푸시될 때마다 실행됩니다.

jobs:
  deploy:
    runs-on: ubuntu-latest  # Ubuntu 환경에서 실행

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4  # GitHub 리포지토리의 파일을 불러옵니다.

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17  # Java 17 설치

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml  # application.yml 파일 생성

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build  # Gradle로 빌드

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2  # AWS 리전 설정
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # GitHub 시크릿에 저장된 AWS 액세스 키
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # GitHub 시크릿에 저장된 AWS 비밀 액세스 키

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2  # AWS ECR에 로그인

      - name: Docker 이미지 생성
        run: docker build -t nhj-server .  # Docker 이미지를 빌드

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag nhj-server ${{ steps.login-ecr.outputs.registry }}/nhj-server:latest  # ECR 레지스트리에 태그 추가

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/nhj-server:latest  # ECR에 이미지 푸시

      - name: EC2에 SSH로 접속하여 컨테이너 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 인스턴스의 퍼블릭 IP
          username: ${{ secrets.EC2_USERNAME }}  # EC2 사용자명 (보통 'ubuntu')
          key: ${{ secrets.EC2_PRIVATE_KEY }}  # EC2 private key (GitHub 시크릿에 저장된 키)
          script_stop: true
          script: |
            docker stop nhj-server || true  # 이전에 실행 중인 컨테이너 종료
            docker rm nhj-server || true  # 이전 컨테이너 제거
            docker pull ${{ steps.login-ecr.outputs.registry }}/nhj-server:latest  # 최신 이미지 풀
            docker run -d --name nhj-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/nhj-server:latest  # 컨테이너 실행

      - name: RDS와 ElastiCache 환경 설정
        run: |
          # RDS와 ElastiCache 환경 변수를 EC2에 설정
          export RDS_HOST=${{ secrets.RDS_HOST }}
          export RDS_PORT=3306
          export REDIS_HOST=${{ secrets.REDIS_HOST }}
          export REDIS_PORT=6379

          # EC2에서 RDS와 ElastiCache에 연결 확인
          # 예시로 MySQL과 Redis 연결 테스트 명령어를 추가
          mysql -h $RDS_HOST -P $RDS_PORT -u root -p${{ secrets.RDS_PASSWORD }} -e "SHOW DATABASES;"
          redis-cli -h $REDIS_HOST -p $REDIS_PORT PING